name: "Install Python and Poetry"
description: "Setup Python and Poetry"

inputs:
  workdir:
    description: "The working directory"
    required: false
    default: "."
  install-deps:
    description: "Should the action install deps?"
    required: false
    default: false
  only-dev-deps:
    description: "Should the action only install the dev dependencies?"
    required: false
    default: false
  cache-deps:
    description: "Should the action try to cache the poetry dependencies?"
    required: false
    default: true

outputs:
  python-version:
    description: "The installed Python version"
    # works for cache OR non-cached step!
    value: ${{ steps.setup_python.outputs.python-version }}

runs:
  using: "composite"
  steps:
    - name: Set Poetry Version
      run: |
        if [ -f .poetry-version ]; then
          echo "POETRY_VERSION=$(cat ${{ inputs.workdir }}/.poetry-version)" >> $GITHUB_ENV
        else
          echo ".poetry-version file not found. Aborting." >&2
          exit 1
        fi
      shell: bash

    - name: Check .python-version file
      run: |
        if [ -f .python-version ]; then
          echo "PYTHON_VERSION=$(cat ${{ inputs.workdir }}/.python-version)" >> $GITHUB_ENV
        else
          echo ".python-version file not found. Aborting." >&2
          exit 1
        fi
      shell: bash

    - name: Set up Python ${{ inputs.python-version }}
      id: setup_python
      uses: actions/setup-python@v4
      with:
        python-version-file: "${{ inputs.workdir }}/.python-version"

    - name: Load cached Poetry installation
      id: cached-poetry
      # caching poetry installation doesn't work when using ACT for some reason...
      if: ${{ !env.ACT }}
      uses: actions/cache@v3
      with:
        path: ~/.local # the path depends on the OS
        key: poetry-0 # increment to reset cache

    - name: Install and configure Poetry
      if: steps.cached-poetry.outputs.cache-hit != 'true'
      # TODO: use hashed version of snok/install-poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: false
        installer-parallel: true

    # load cache if cache exists (and inputs.cache-deps is true)
    - name: Load cached venv
      if: ${{ inputs.cache-deps == 'true' }}
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    # if there are no cache hits, then we have to install the deps
    - name: Install dependencies (dev dependencies)
      if: ${{ steps.cached-poetry-dependencies.outputs.cache-hit != 'true' && inputs.install-deps == 'true' && inputs.only-dev-deps == 'true' }}
      # Only installs dev dependencies
      run: cd ${{ inputs.workdir }} && poetry install --only dev --no-interaction
      # OR
    - name: Install dependencies (regular AND dev dependencies)
      if: ${{ steps.cached-poetry-dependencies.outputs.cache-hit != 'true' && inputs.install-deps == 'true' && inputs.only-dev-deps == 'false' }}
      # Installs regular dependencies AND dev dependencies
      run: cd ${{ inputs.workdir }} && poetry install --no-interaction
